# This workflow will build a package using Maven and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#apache-maven-with-a-settings-path

name: Release

on:
  pull_request:
    types: [closed]

jobs:

  release-name-check:
    uses: ./.github/workflows/pre-release.yml

  publish:
    needs: [release-name-check]
    runs-on: ubuntu-latest
    if: ${{ needs.release-name-check.outputs.release_name_check == 'true' }}
    name: publish project
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Get Release Parameters
        id: extract-info
        run: |
          groupId=$(mvn help:evaluate -Dexpression=project.groupId -q -DforceStdout)
          artifactId=$(mvn help:evaluate -Dexpression=project.artifactId -q -DforceStdout)
          version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          body=$(cat $GITHUB_EVENT_PATH | jq -r '.pull_request.body')
          echo "PR Body: $body"
          echo "body<<EOF"$'\n'"$body"$'\n'EOF >> "$GITHUB_OUTPUT"
          echo "Pom GroupId: $groupId"
          echo "Pom ArtifactId: $artifactId"
          echo "Pom Version: $version"
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "artifactId=$artifactId" >> $GITHUB_OUTPUT
          echo "groupId=$groupId" >> $GITHUB_OUTPUT

      - name: Set up Maven Central Repository
        uses: actions/setup-java@v4
        with: # running setup-java again overwrites the settings.xml
          java-version: '8'
          distribution: 'temurin'
          server-id: central # Value of the distributionManagement/repository/id field of the pom.xml
          server-username: MAVEN_USERNAME # env variable for username in deploy
          server-password: MAVEN_CENTRAL_TOKEN # env variable for token in deploy
          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }} # Value of the GPG private key to import
          gpg-passphrase: MAVEN_GPG_PASSPHRASE # env variable for GPG private key passphrase

      - name: Publish to Apache Maven Central
        run: mvn -B deploy
        env:
          MAVEN_USERNAME: ${{ secrets.MAVEN_CENTRAL_USERNAME }}
          MAVEN_CENTRAL_TOKEN: ${{ secrets.MAVEN_CENTRAL_PASSWORD }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

      - name: Create Github Tag
        uses: negz/create-tag@v1
        with:
          version: v${{ steps.extract-info.outputs.version }}
          message: ${{ steps.extract-info.outputs.body }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Github Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name:  v${{ steps.extract-info.outputs.version }}
          release_name: v${{ steps.extract-info.outputs.version }}
          body: ${{ steps.extract-info.outputs.body }}
          draft: false
          prerelease: false




